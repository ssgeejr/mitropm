VALID_TOOLCHAINS := pnacl newlib

include $(NACL_SDK_ROOT)/tools/common.mk


TARGET = mitro_crypto
DEPS =
LIBS = $(DEPS) thrift keyczar crypto z nacl_io ppapi_cpp ppapi

THIRD_PARTY_PREFIX=$(TC_PATH)/$(OSNAME)_$(TOOLCHAIN)
CXXFLAGS = -Wall -I. -Igen-cpp -I$(THIRD_PARTY_PREFIX)/usr/include
LDFLAGS =  -I$(THIRD_PARTY_PREFIX)/usr/lib

KEYCZARJSON_SOURCES = \
keyczar_json/json_keyset_reader.cc \
keyczar_json/keyczar_session.cc \
keyczar_json/mitrokey.cc

MITRO_CRYPTO_SOURCES = \
gen-cpp/mitro_crypto_types.cpp \
gen-cpp/thrift_nacl_types.cpp \
mitro_crypto.cc \
thrift_nacl.cc

SOURCES = $(KEYCZARJSON_SOURCES) $(MITRO_CRYPTO_SOURCES)

THRIFT = ../../cpp/third_party/bin/thrift

gen-cpp/%_types.cpp: %.thrift
	$(THRIFT) --gen cpp $^

# Build rules generated by macros from common.mk:

$(foreach dep,$(DEPS),$(eval $(call DEPEND_RULE,$(dep))))
$(foreach src,$(SOURCES),$(eval $(call COMPILE_RULE,$(src),$(CXXFLAGS))))

ifeq ($(CONFIG),Release)
$(eval $(call LINK_RULE,$(TARGET)_unstripped,$(SOURCES),$(LIBS),$(DEPS),$(LDFLAGS)))
$(eval $(call STRIP_RULE,$(TARGET),$(TARGET)_unstripped))
else
$(eval $(call LINK_RULE,$(TARGET),$(SOURCES),$(LIBS),$(DEPS),$(LDFLAGS)))
endif

$(eval $(call NMF_RULE,$(TARGET),))
