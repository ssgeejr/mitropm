# Half-assed configuration for the primary

---
- hosts: primary
  sudo: yes
  vars:
    - jdk_version: 65
  tasks:
    - name: upgrade packages if older than 1 day
      apt: update_cache=yes upgrade=safe cache_valid_time=86400
    - name: check for upstart (IT MUST BE INSTALLED MANUALLY)
      apt: pkg=upstart state=present
    - name: install less (more is really annoying)
      apt: pkg=less state=present
    - name: check java version
      file: state=link src=/opt/java/jdk1.7.0_{{jdk_version}}/bin/java dest=/etc/alternatives/java force=yes
      register: use_oracle_java
    - name: create /opt/java
      file: path=/opt/java state=directory mode=755 owner=root
      when: use_oracle_java.changed
    - name: Copy Oracle Java
      copy: src=third_party/jdk-7u{{jdk_version}}-linux-x64.gz dest=/tmp mode=700
      when: use_oracle_java.changed
    - name: Extract Oracle Java
      shell: tar --no-same-owner -xzf /tmp/jdk-7u{{jdk_version}}-linux-x64.gz -C /opt/java
      when: use_oracle_java.changed
    - name: Set Oracle Java as default
      shell: update-alternatives --install /usr/bin/java java /opt/java/jdk1.7.0_{{jdk_version}}/bin/java 20000
      when: use_oracle_java.changed
    - name: Clean up tar
      file: path=/tmp/jdk-7u{{jdk_version}}-linux-x64.gz state=absent

    - name: Update /etc/fstab
      copy: src=primary/fstab dest=/etc/fstab owner=root group=root
      register: etc_fstab
    - name: Mount all filesystems
      shell: mount -a
      when: etc_fstab.changed

    - name: Create www static content dir
      file: path=/home/ubuntu/www state=directory owner=ubuntu group=ubuntu

    - name: set kernel.shmmax for postgres (max shared memory segment in bytes)
      sysctl: name=kernel.shmmax value=34359738368
    - name: setup sysctl for postgres (max total shared memory in 4096-byte pages)
      sysctl: name=kernel.shmall value=8388608
    - name: install postgresql
      apt: pkg=postgresql state=present
    - name: configure Postgres localhost IPv4 permissions
      lineinfile: dest=/etc/postgresql/9.1/main/pg_hba.conf line="host    all             all             127.0.0.1/32            trust" regexp="host +all +all +127.0.0.1/32"
    - name: configure Postgres localhost IPv6 permissions
      lineinfile: dest=/etc/postgresql/9.1/main/pg_hba.conf line="host    all             all             ::1/128                 trust" regexp="host +all +all +::1/128"
    - name: create postgres archive dir
      file: path=/archive/postgres_archive state=directory mode=755 owner=postgres group=postgres
    - name: copy postgresql.conf
      copy: src=primary/postgresql/9.1/main/postgresql.conf dest=/etc/postgresql/9.1/main/postgresql.conf
      notify: restart postgres

    # Setup postgres replication
    - name: cron postgres replication copy to secondary
      cron: name="postgres replication copy to secondary" user=postgres minute=*/2 job="/usr/bin/rsync --delete -arhz --chmod=Fug=r /archive/postgres_archive/ postgres_replication@secondary.mitro.co:/large/postgres_replication"
    - name: cron clean up old postgres_archive
      cron: name="clean up old postgres_archive" user=postgres minute=*/5 job="find /archive/postgres_archive/ -mmin +7200 -delete"

    # Install datadog
    - name: install Datadog signing key
      apt_key: state=present data="{{lookup('file', 'secondary/dd-agent/datadog_public_apt.gpg')}}"
    # apt_repository requires pycurl; don't want to install locally
    - name: add Datadog repository
      copy: dest=/etc/apt/sources.list.d/datadog.list owner=root group=root content="deb http://apt.datadoghq.com/ unstable main"
      register: datadog_apt_repository
    - name: Update apt repository
      apt: update_cache=yes
      when: datadog_apt_repository.changed
    - name: install Datadog agent
      apt: pkg=datadog-agent force=yes
    - name: install python-psycopg2 (for Datadog Postgres integration)
      apt: pkg=python-psycopg2
    - name: copy datadog config
      copy: src=primary/dd-agent/datadog.conf dest=/etc/dd-agent/datadog.conf owner=root group=root
      notify: restart datadog
    - name: datadog integrations
      copy: src={{item}} dest=/etc/dd-agent/conf.d owner=root group=root
      with_fileglob: primary/dd-agent/conf.d/*.yaml
      notify: restart datadog

    # TODO: Remove this dependency on our old code
    # Right now this requires a manual deploy
    - name: create emailer user
      user: name=emailer system=yes state=present
      sudo: yes
    - name: run emailer2
      copy: src=primary/init/emailer2.conf dest=/etc/init owner=root group=root
      notify: start emailer2

    # TODO: This also lives in a different repository
    - name: run poll_mitro_web
      copy: src=primary/init/poll_mitro_web.conf dest=/etc/init owner=root group=root
      notify: start poll_mitro_web

    # Configure nginx
    - name: install nginx
      apt: pkg=nginx state=present
    - name: nginx.conf
      copy: src=primary/nginx/nginx.conf dest=/etc/nginx owner=root group=root mode=0444
      notify: reload nginx
    - name: nginx sites-enabled
      copy: src={{item}} dest=/etc/nginx/sites-enabled owner=root group=root mode=0444
      with_fileglob: primary/nginx/sites-enabled/*
      notify: reload nginx
    - name: Remove nginx default
      file: path=/etc/nginx/sites-enabled/default state=absent
      notify: reload nginx

    - name: check SSL certificate (copied by ssl_keys_certs.yml)
      file: state=file dest=/etc/nginx/mitro_co.crt owner=root group=root mode=0444
    - name: check SSL key (copied by ssl_keys_certs.yml)
      file: state=file dest=/etc/nginx/mitro_co.pem owner=root group=root mode=0400

    # Used to synchronize SSH access on the original production machine
    # - name: sync ubuntu authorized_keys
    #   copy: src=primary/authorized_keys dest=/home/ubuntu/.ssh/authorized_keys mode=0400 owner=ubuntu group=ubuntu

    # Done by ssl_keys_certs.yml
    #- name: Copy secrets
    #  synchronize: src=primary/mitrocore/mitrocore_secrets dest=/home/ubuntu/mitrocore recursive=true rsync_path="sudo rsync" set_remote_user=no

  handlers:
    - name: reload nginx
      service: name=nginx state=reloaded
    - name: restart postgres
      service: name=postgresql state=restarted
    # datadog doesn't support reloading
    - name: restart datadog
      service: name=datadog-agent state=restarted
    - name: start emailer2
      service: name=emailer2 state=started
    - name: start poll_mitro_web
      service: name=poll_mitro_web state=started
